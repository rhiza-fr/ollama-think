{
    "codeqwen:7b-chat": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "cogito:14b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepcoder:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepscaler:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-coder-v2:16b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-r1:1.5b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 3 column 1 (char 3) '{\n\n{\n\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: key must be a string at line 3 column 1 [type=json_invalid, input_value='{\\n\\n{\\n\\n\"addition_resu...t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\n\n{\n\n\"addition_result\":2}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-r1:14b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 1 column 2 (char 1) '{{    \n    \"question\": \"What is 2 + 3?\",\n    \"think\": \"I need to add two numbers, 2 and 3. Adding them together gives me the total.\",\n    \"answer\": 5\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: key must be a string at line 1 column 2 [type=json_invalid, input_value='{{ \"addition_result\": 5 ...   \\t\\t\\t\\t\\t    \\t\\t\\t', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{{ \"addition_result\": 5 }\n       \t\t\t\t\t    \t\t\t'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-r1:7b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 3 column 1 (char 3) '{\n\n{\n\n\n\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: expected `:` at line 1 column 5 [type=json_invalid, input_value='{\"{\"addition_result\": 5}...         \\t \\t \\t \\t \\t', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\"{\"addition_result\": 5}\n           \t \t \t \t \t'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-r1:8b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n  \"answer\": \"5\"\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: key must be a string at line 3 column 1 [type=json_invalid, input_value='{\\n\\n{\\n\\n  \"addition_result\": 5\\n\\n}\\n\\n  ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\n\n{\n\n  \"addition_result\": 5\n\n}\n\n  '"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "deepseek-r1:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n\"Human\": \"what is 2 + 3?\"\n\n\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: key must be a string at line 3 column 1 [type=json_invalid, input_value='{\\n\\n{\\n\\n\"addition_result\": 5\\n\\n}', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\n\n{\n\n\"addition_result\": 5\n\n}'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "dolphin-llama3:8b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "ebdm/gemma3-enhanced:12b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '2 + 3 = 5'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "exaone-deep:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "falcon3:10b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "gemma2:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "gemma3:12b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "gemma3:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "gemma3n:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "granite3.1-dense:8b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '<tool_call>[{\"arguments\":{\"a\":2,\"b\":3},\"name\":\"addTwoInts\"}]'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "granite3.2-vision:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Thinking supported but empty"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '\n5'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "granite3.2:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '5'"
        ],
        "can_tool_call_think": [
            false,
            "Expected tool call, received '5'"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "granite3.3:latest": {
        "can_json": [
            false,
            "Extra data: line 1 column 3 (char 2) '2 + 3 equals $\\boxed{5}$.'"
        ],
        "can_json_think": [
            false,
            "Extra data: line 1 column 3 (char 2) '2 + 3 equals $\\boxed{5}$.'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received ''"
        ],
        "can_tool_call_think": [
            false,
            "Expected tool call, received ''"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "llama3.1:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "llama3.2-vision:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "llama3.2:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "marco-o1:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "minicpm-v:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "mistral:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi3.5:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi3:14b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi4-mini-reasoning:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi4-mini:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '<|tool_call|>Sure, I can help you with that. Let me use the \"addTwoInts\" function to get your answer.\n\n[{\"name\": \"addTwoInts\", \"arguments\": {\"a\": 2, \"b\": 3}}]<|/tool_call|><|assistant|>\u66ab\u6642\u7b49\u5f85\u7d50\u679c\u7684\u56de\u994b\u3002\n\n[\"name\": \"result\", \"arguments\": [\"the result of addTwoInts({ 'a': 2, 'b': 3 })\"]]'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi4-reasoning:plus": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            true,
            ""
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            true,
            ""
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Does not support tools"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "phi4:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen2.5-coder:1.5b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '```json\n{\n  \"name\": \"addTwoInts\",\n  \"arguments\": {\n    \"a\": 2,\n    \"b\": 3\n  }\n}\n```'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen2.5-coder:14b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '{\"name\": \"addTwoInts\", \"arguments\": {\"a\": 2, \"b\": 3}}'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen2.5-coder:7b-base": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen2.5-coder:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received '{\n  \"name\": \"addTwoInts\",\n  \"arguments\": {\n    \"a\": 2,\n    \"b\": 3\n  }\n}'"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen3:0.6b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n  \"response\": \"The answer is 5, but please note that the question is not well-posed as a mathematical problem. In mathematics, 2 + 3 is a valid arithmetic operation, and the result is 5. However, it's important to clarify the context of the question if you're seeking a deeper understanding or a different perspective.\",\n  \"question\": \"what is 2 + 3?\",\n  \"answer\": \"5\"\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: expected `:` at line 1 column 5 [type=json_invalid, input_value='{\"{\"addition_result\": 5}\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\"{\"addition_result\": 5}\n'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen3:1.7b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n    \"response\": \"5\",\n    \"steps\": [\n        {\n            \"step\": 1,\n            \"action\": \"identify the operation\",\n            \"description\": \"The operation is addition.\"\n        },\n        {\n            \"step\": 2,\n            \"action\": \"analyze the numbers\",\n            \"description\": \"The numbers are 2 and 3.\"\n        },\n        {\n            \"step\": 3,\n            \"action\": \"apply the addition rule\",\n            \"description\": \"Add 2 and 3 together.\"\n        },\n        {\n            \"step\": 4,\n            \"action\": \"perform the calculation\",\n            \"description\": \"2 + 3 = 5.\"\n        },\n        {\n            \"step\": 5,\n            \"action\": \"verify the result\",\n            \"description\": \"The result is correct.\"\n        }\n    ]\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: expected `:` at line 1 column 5 [type=json_invalid, input_value='{\"{\"addition_result\":25}\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\"{\"addition_result\":25}\n'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen3:14b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n\"Okay, let's see. The user is asking what is 2 plus 3. Hmm, that's a basic arithmetic problem. I need to make sure I answer correctly. Let me think. 2 plus 3... in mathematics, addition is one of the fundamental operations. So adding 2 and 3 together. Let me count. 2 plus 1 is 3, plus another 2 would be 5. Wait, no, that's not right. Wait, 2 plus 3. Let me do it step by step. Starting with 2, adding 1 makes 3, adding another 1 makes 4, and then another 1 makes 5. Yes, that's correct. Alternatively, 2 and 3 are numbers on the number line. If I move 2 units to the right from 0, then 3 more units, I end up at 5. So the answer should be 5. I should also consider if there's any context where this might be different, like in modular arithmetic or something else, but the user didn't specify any special context. So the straightforward answer is 5. I should present that clearly and concisely. Maybe also mention that it's a basic addition problem to set the context. Alright, I think that's all. Let me put it together in a friendly and helpful way without any markdown formatting as instructed. Make sure the answer is accurate and easy to understand. Yep, that should cover it. The final answer is 5, and I need to box it as per the instructions. Alright, done.\":\n{\n  \"answer\": \"The result of 2 + 3 is 5. This is a basic arithmetic addition problem where you combine the numbers 2 and 3 to get the sum 5.\"\n}\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: expected `:` at line 1 column 5 [type=json_invalid, input_value='{\"{\"addition_result\":5}', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\"{\"addition_result\":5}'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen3:4b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 2 column 1 (char 2) '{\n{\n  \"answer\": \"5\",\n  \"thought_process\": \"The question is asking for the sum of 2 and 3. In arithmetic, adding two numbers involves combining their values. When we add 2 and 3, we get 5. This is a basic addition problem, and the result is straightforward. There is no need for complex calculations or additional steps. The answer is 5.\"\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: key must be a string at line 2 column 1 [type=json_invalid, input_value='{\\n{\\n\"addition_result\": 5\\n}\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\n{\n\"addition_result\": 5\n}\n'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            false,
            "Expected tool call, received 'The result of 2 + 3 is 5.'"
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "qwen3:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Expecting property name enclosed in double quotes: line 4 column 1 (char 4) '{\n\n\n{\n\n\n  \"question\": \"what is 2 + 3?\",\n  \"answer\": \"5\",\n  \"explanation\": \"The addition of 2 and 3 results in 5.\"\n}'"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "1 validation error for ResponseObj\n  Invalid JSON: expected `:` at line 1 column 5 [type=json_invalid, input_value='{\"{\"addition_result\": 5}\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/json_invalid '{\"{\"addition_result\": 5}\n'"
        ],
        "can_think": [
            true,
            ""
        ],
        "can_tool_call": [
            true,
            ""
        ],
        "can_tool_call_think": [
            true,
            ""
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "reader-lm:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "smallthinker:latest": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "starcoder2:7b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    },
    "wizardlm2:7b": {
        "can_json": [
            true,
            ""
        ],
        "can_json_think": [
            false,
            "Thinking not supported"
        ],
        "can_pydantic": [
            true,
            ""
        ],
        "can_pydantic_think": [
            false,
            "Thinking not supported"
        ],
        "can_think": [
            false,
            "Does not support thinking"
        ],
        "can_tool_call": [
            false,
            "Does not support tools"
        ],
        "can_tool_call_think": [
            false,
            "Thinking not supported"
        ],
        "content_no_thinking": [
            true,
            ""
        ]
    }
}